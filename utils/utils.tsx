import { QuestionTypeProps } from "./componentTypes";

export const manualStatusTag = ({ status }: { status: string }) => {
  switch (status) {
    case "CREATED":
      return (
        <div
          className={`text-[8px] h-4 font-medium text-[#1E1E1E] px-[6px] bg-[#D4E7FF] rounded inline-flex justify-center items-center`}
        >
          “Æ“Ø—Å—Å—ç–Ω
        </div>
      );
    case "PUBLISHED":
      return (
        <div
          className={`text-[8px] h-4 font-medium px-[6px] text-[#1E1E1E] bg-[#D4E7FF] rounded inline-flex justify-center items-center`}
        >
          –ù–∏–π—Ç—ç–ª—Å—ç–Ω
        </div>
      );
    case "CLOSED":
      return (
        <div
          className={`text-[8px] text-[#FDFDFD] h-4 font-medium px-[6px] bg-[#5A5A5A] rounded inline-flex justify-center items-center`}
        >
          –î—É—É—Å—Å–∞–Ω
        </div>
      );
    default:
      return <div>–¢–æ–¥–æ—Ä—Ö–æ–π–≥“Ø–π</div>;
  }
};

export const questionTypeTranslations: Record<string, string> = {
  MULTI_CHOICE: "–û–ª–æ–Ω —Å–æ–Ω–≥–æ–ª—Ç—Ç–æ–π",
  RATING: "“Æ–Ω—ç–ª–≥—ç—ç",
  YES_NO: "–¢–∏–π–º/“Æ–≥“Ø–π",
  TEXT: "–¢–µ–∫—Å—Ç",
  SINGLE_CHOICE: "–ì–∞–Ω—Ü —Å–æ–Ω–≥–æ–ª—Ç—Ç–æ–π",
  DROPDOWN: "Dropdown",
  MULTIPLE_CHOICE_GRID: "–•“Ø—Å–Ω—ç–≥—Ç–∏–π–Ω –æ–ª–æ–Ω —Å–æ–Ω–≥–æ–ª—Ç—Ç–æ–π",
  TICK_BOX_GRID: "–¢—ç–º–¥—ç–≥–ª—ç—ç–Ω–∏–π –•“Ø—Å–Ω—ç–≥—Ç",
  LINEAR_SCALE: "–®—É–≥–∞–º–∞–Ω –º–∞—Å—à—Ç–∞–±",
  DATE: "–û–≥–Ω–æ–æ",
  TIME: "–¶–∞–≥",
};

export const questionTypes: QuestionTypeProps[] = [
  {
    icon: <div>üìù</div>,
    title: questionTypeTranslations["MULTI_CHOICE"],
    questionType: "MULTI_CHOICE",
  },
  {
    icon: <div>üîò</div>,
    title: questionTypeTranslations["SINGLE_CHOICE"],
    questionType: "SINGLE_CHOICE",
  },
  {
    icon: <div>‚≠ê</div>,
    title: questionTypeTranslations["RATING"],
    questionType: "RATING",
  },
  {
    icon: <div>‚úÖ</div>,
    title: questionTypeTranslations["YES_NO"],
    questionType: "YES_NO",
  },
  {
    icon: <div>üìú</div>,
    title: questionTypeTranslations["TEXT"],
    questionType: "TEXT",
  },
  {
    icon: <div>üìú</div>,
    title: questionTypeTranslations["DROPDOWN"],
    questionType: "DROPDOWN",
  },
  {
    icon: null,
    title: questionTypeTranslations["MULTIPLE_CHOICE_GRID"],
    questionType: "MULTIPLE_CHOICE_GRID",
  },
  {
    icon: null,
    title: questionTypeTranslations["TICK_BOX_GRID"],
    questionType: "TICK_BOX_GRID",
  },
  {
    icon: null,
    title: questionTypeTranslations["LINEAR_SCALE"],
    questionType: "LINEAR_SCALE",
  },
  {
    icon: null,
    title: questionTypeTranslations["DATE"],
    questionType: "DATE",
  },
  {
    icon: null,
    title: questionTypeTranslations["TIME"],
    questionType: "TIME",
  },
];

export const formatNumber = (num: number): string => {
  if (num >= 1_000_000) {
    return (num / 1_000_000).toFixed(1) + "M";
  } else if (num >= 1_000) {
    return (num / 1_000).toFixed(1) + "K";
  } else {
    return num.toString();
  }
};

export const dualColors = [
  ["#FDFDFD", "#2C2C2C"],
  ["#071522", "#4AD2FF"],
  ["#1E1E1E", "#FFC043"],
  ["#988750", "#FFFFFF"],
  ["#ED6E33", "#2C2C2C"],
  ["#5A7274", "#FFA500"],
];

export const onboardingData = {
  CORPORATE: [
    {
      title: "–ë–∞–π–≥—É—É–ª–ª–∞–≥—ã–Ω –º—ç–¥—ç—ç–ª—ç–ª",
      options: [
        {
          input: true,
          name: "name",
          text: "–ë–∞–π–≥—É—É–ª–ª–∞–≥—ã–Ω –Ω—ç—Ä /–ó–∞–∞–≤–∞–ª/",
        },
        {
          input: true,
          name: "regNum",
          text: "–ë–∞–π–≥—É—É–ª–ª–∞–≥—ã–Ω —Ä–µ–≥–∏—Å—Ç—Ä /–ó–∞–∞–≤–∞–ª –±–∏—à/",
        },
      ],
    },
    {
      title: "–¢–∞–Ω–∞–π –±–∞–π–≥—É—É–ª–ª–∞–≥–∞ —Ö—ç–¥—ç–Ω –∞–∂–∏–ª—Ç–∞–Ω—Ç–∞–π –≤—ç?",
      name: "employees",
      options: [
        {
          val: "COUNT_1_20",
          text: "1-20",
        },
        {
          val: "COUNT_21_50",
          text: "21-50",
        },
        {
          val: "COUNT_51_100",
          text: "51-100",
        },
        {
          val: "COUNT_100",
          text: "100<",
        },
      ],
    },
    {
      title: "“Æ–π–ª –∞–∂–∏–ª–ª–∞–≥–∞–∞ —è–≤—É—É–ª–¥–∞–≥ —Å–∞–ª–±–∞—Ä —Å–æ–Ω–≥–æ—Ö",
      name: "operation",
      options: [
        {
          val: "FINANCE",
          text: "–ë–∞–Ω–∫, –°–∞–Ω—Ö“Ø“Ø",
        },
        {
          val: "MINING",
          text: "–£—É–ª —É—É—Ä—Ö–∞–π",
        },
        {
          val: "TRADE",
          text: "–•—É–¥–∞–ª–¥–∞–∞ “Ø–π–ª—á–∏–ª–≥—ç—ç",
        },
        {
          val: "CONSTRUCTION",
          text: "–ë–∞—Ä–∏–ª–≥–∞, “Æ–ª —Ö”©–¥–ª”©—Ö",
        },
        {
          val: "TECHNOLOGY",
          text: "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏, –•–∞—Ä–∏–ª—Ü–∞–∞ —Ö–æ–ª–±–æ–æ",
        },
        {
          val: "EDUCATION",
          text: "–ë–æ–ª–æ–≤—Å—Ä–æ–ª",
        },
        {
          val: "MEDICAL",
          text: "–≠—Ä“Ø“Ø–ª –º—ç–Ω–¥",
        },
        {
          val: "OTHER",
          text: "–ë—É—Å–∞–¥",
        },
      ],
    },
  ],
  INDIVIDUAL: [
    {
      title: "–¢–∞ —è–º–∞—Ä –∞–∂–∏–ª —ç—Ä—Ö—ç–ª–¥—ç–≥ –≤—ç?",
      name: "work",
      options: [
        {
          val: "RESEARCHER",
          text: "–°—É–¥–ª–∞–∞—á",
        },
        {
          val: "STUDENT",
          text: "–û—é—É—Ç–∞–Ω",
        },
        {
          val: "HR",
          text: "–•“Ø–Ω–∏–π –Ω”©”©—Ü",
        },
        {
          val: "EDUCATOR",
          text: "–ë–æ–ª–æ–≤—Å—Ä–æ–ª —Å–∞–ª–±–∞—Ä—ã–Ω –º—ç—Ä–≥—ç–∂–∏–ª—Ç—ç–Ω",
        },
        {
          val: "PSYCHOLOGIST",
          text: "–°—ç—Ç–≥—ç–ª —Å—É–¥–ª–∞–∞—á",
        },
        {
          val: "OTHER",
          text: "–ë—É—Å–∞–¥",
        },
      ],
    },
    {
      title: "–¢–∞ —è–º–∞—Ä –∑–æ—Ä–∏–ª–≥–æ–æ—Ä –∞—à–∏–≥–ª–∞—Ö –≤—ç?",
      name: "use",
      options: [
        {
          val: "COLLECT",
          text: "–°—É–¥–∞–ª–≥–∞–∞–Ω—ã –¥–∞—Ç–∞ —Ü—É–≥–ª—É—É–ª–∞—Ö",
        },
        {
          val: "RESEARCH",
          text: "–ë–∞–π–≥—É—É–ª–ª–∞–≥—ã–Ω —Å—É–¥–∞–ª–≥–∞–∞ —Ö–∏–π—Ö",
        },
        {
          val: "OTHER",
          text: "–ë—É—Å–∞–¥",
        },
      ],
    },
  ],
};

export const formatAmount = (num: number): string => {
  return new Intl.NumberFormat("en-US", {
    useGrouping: true,
  })
    .format(num)
    .replace(/,/g, "'");
};

export function formatNumberWithApostrophes(number: number) {
  const roundedNumber = number.toFixed();
  return roundedNumber.replace(/\B(?=(\d{3})+(?!\d))/g, "‚Äô");
}
